head(df)
head(x = df)
?read.table
head(n = 2, x = df)
head(n = 2, df)
df$x
median(df$x)
df[, x]
df[, "x"]
x
select(df, "x")
select(df, x)
select_(df, "x")
?select
select(df, x)
df[,x]
select_(df, "x")
df[, "x"]
?select
x
head(x, 2)
x %>% head(2)
sqrt(mean(x))
log(sqrt(mean(x)))
sqrt(log(sqrt(mean(x))))
x %>% mean %>% sqrt %>% log %>% sqrt
x
x2 = c(x, 5, 2, 3)
cbind(df, x2)
head(df)
df = rename(df, x2 = X)
head(df)
cbind(df, x2)
x2
length(x)
length(x2)
dim(df)
nrow(df)
cbind(df, x2)
df
select(df, -x)
df
select(df, -x)
df = select(df, -x)
select(df, -c("y", "z"))
-c("y", "z")
select(df, -y, yz
select(df, -y, -z)
select(df, -c(y, z))
select(df, c(-y, -z))
df[, -c("y", "z")]
df[, -c(y, z)]
## ---- echo = FALSE-------------------------------------------------------
library(knitr)
opts_chunk$set(comment = "")
## ------------------------------------------------------------------------
x = c(1, 4, 2, 8, 10)
x[2]
## ------------------------------------------------------------------------
x = c(1, 2, 4, 8, 10)
x[5]
x[c(2,5)]
## ----negativeIndex-------------------------------------------------------
x[-2] # all but the second
## ----negativeIndex2------------------------------------------------------
x[-c(1,2,3)] # drop first 3
# x[-1:3] # shorthand. R sees as -1 to 3
x[-(1:3)] # needs parentheses
## ------------------------------------------------------------------------
x
x > 2
x[ x > 2 ]
## ------------------------------------------------------------------------
x[ x > 2 & x < 5 ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
which(x > 5 | x == 2) # returns index
x[ which(x > 5 | x == 2) ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
set.seed(2016) # reproducbility
df = data.frame(x = c(1, 2, 4, 10, 10),
x2 = rpois(5, 10),
y = rnorm(5),
z = rpois(5, 6)
)
## ------------------------------------------------------------------------
colnames(df) = c("x", "X", "y", "z")
head(df)
colnames(df) = c("x", "x2", "y", "z") #reset
df
cn =colnames(df)
c("z", cn[ cn!="z"])
c("z", colnames(df)[ colnames(df)!="z"])
c("z", cn[ cn!="z"])
select(df, everything(), x)
select(df, everything(), y)
?select
select(df, -matches("x"))
select(df, -matches("x"), matches('x'))
select(df, -one_of("x"), one_of('x'))
help("select")
help("filter")
?filter
library(dplyr)
?filter
?select
## ---- echo = FALSE-------------------------------------------------------
library(knitr)
opts_chunk$set(comment = "")
## ------------------------------------------------------------------------
x = c(1, 4, 2, 8, 10)
x[2]
## ------------------------------------------------------------------------
x = c(1, 2, 4, 8, 10)
x[5]
x[c(2,5)]
## ----negativeIndex-------------------------------------------------------
x[-2] # all but the second
## ----negativeIndex2------------------------------------------------------
x[-c(1,2,3)] # drop first 3
# x[-1:3] # shorthand. R sees as -1 to 3
x[-(1:3)] # needs parentheses
## ------------------------------------------------------------------------
x
x > 2
x[ x > 2 ]
## ------------------------------------------------------------------------
x[ x > 2 & x < 5 ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
which(x > 5 | x == 2) # returns index
x[ which(x > 5 | x == 2) ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
set.seed(2016) # reproducbility
df = data.frame(x = c(1, 2, 4, 10, 10),
x2 = rpois(5, 10),
y = rnorm(5),
z = rpois(5, 6)
)
## ------------------------------------------------------------------------
colnames(df) = c("x", "X", "y", "z")
head(df)
colnames(df) = c("x", "x2", "y", "z") #reset
df
df[ order(df$y),]
arrange(df, x
)
arrange(df, x, z)
)
arrange(df, x)
arrange(df, x, z)
arrange(df, desc(x))
arrange(df, desc(x), z)
filter(df, x == 1)
filter(df, x != 1)
?sample_frac()
Inf . 2
Inf > 2
NaN > 2
mystr = c("Hey", "", "ho", "let's", "go")
is.na(mystr)
mystr[ mystr == ""] = NA
is.na(mystr)
mystr
factor(mystr)
NA & TRUE
NA & FALSE
NA | TRUE
NA & TRUE
?table
tab <- table(c(0, 1, 2, 3, 2, 3, 3, 2,2, 3),
c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3),
useNA = "always")
tab
tab <- table(x = c(0, 1, 2, 3, 2, 3, 3, 2,2, 3),
y = c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3),
useNA = "always")
tab
x = c(0, 1, 2, 3, 2, 3, 3, 2,2, 3);
y = c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3)
x
y
table(x, y)
table(x)
table(y)
table(x, y)
prop.table(table(x, y), 1)
prop.table(table(x, y), 2)
prop.table(table(x))
library(car, quietly = TRUE)
x = rep(c("Male", "M", "m", "f", "Female", "female" ),
each = 3)
x
unique(x)
table(x)
sort(table(x))
sample(x)
sample(x, , size = 10replace = FALSE)
sample(x, , size = 10,replace = FALSE)
table(sample(x, , size = 10,replace = FALS)E)
table(sample(x, , size = 10,replace = FALSE))
tab  = table(sample(x, , size = 10,replace = FALSE))
sort(tab)
sort(tab, decreasing = TRUE)
tab[tab > 1]
duplicated(x)
x
table(x)
tab = table(x)
tab  = table(sample(x, , size = 10,replace = FALSE))
tab
tab[ tab > 1]
names(tab[ tab > 1])
x = c("hey", 'ho')
x
x = c("hey", "Let's go")
paste("Visit", 1:5)
paste0("Visit", 1:5)
strsplit("I.like.strings", ".")
strsplit("I.like.strings", ".", fixed = TRUE)
?str_detect
library(stringr)
?str_detect
?str_split
?str_extract
?modifiers
cbind(rep("Monday", 3), c("orangeAlightings", "orangeAverage", "orangeBoardings"))
cbind(rep("Monday", 3), rep("orange", 3), Average = rnorm(3), Alightings = rnorm(3), Boardings = rnorm(3))
data.frame(rep("Monday", 3), rep("orange", 3), Average = rnorm(3), Alightings = rnorm(3), Boardings = rnorm(3))
cbind(rep("Monday", 3), c("orangeAlightings", "orangeAverage", "orangeBoardings"))
library(lubridate)
mdy(c("01-06-2016", "01-06/2016", "01/06/2016"))
?as.Date
mdy(c("01-06-2016", "01-06/2016", "01/06/2016"))
dmy(c("01-06-2016", "01-06/2016", "01/06/2016"))
mydays = mdy(c("01-06-2016", "01-06/2016", "01/06/2016"))
day(mydays)
month(mydays)
year(mydays)
?year
?month
mydays - 1
?period
mydays - period(1, "day")
?difftime
mydays = mdy(c("01-06-2016", "01-06/2016", "01/06/2016", "01-08-2016", "01-01-2016"))
mydays
?difftime
difftime(mydays, mydays[1])
difftime(mydays, mydays[1], units = "days")
dt = difftime(mydays, mydays[1], units = "days")
class(dt)
as.numeric(dt)
mydays
cbind(mydays, 0:length(mydays))
cbind(mydays, 0:length(mydays)-1)
cbind(mydays, 0:(length(mydays)-1))
data.frame(mydays, 0:(length(mydays)-1))
data.frame(mydays, days_from_baseline = 0:(length(mydays)-1))
mat = matrix(c("0", "No Stroke Symptoms",
"1-4", "Minor Stroke",
"5-15", "Moderate Stroke",
"16-20", "Moderate to Severe Stroke",
"21-42", "Severe Stroke"), byrow = TRUE, ncol = 5)
colnames(mat) = c("NIHSS Score", "Stroke Severity")
mat
mat = matrix(c("0", "No Stroke Symptoms",
"1-4", "Minor Stroke",
"5-15", "Moderate Stroke",
"16-20", "Moderate to Severe Stroke",
"21-42", "Severe Stroke"), byrow = TRUE, ncol = 2)
colnames(mat) = c("NIHSS Score", "Stroke Severity")
mat
pander(mat)
library(pander)
pander(mat)
mat = data.frame(mat, stringsAsFactors = FALSE)
pander(mat)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/CT_Registration/Segmentation/Segmentation_Paper/")
source('~/.active-rstudio-document', echo=TRUE)
corrdata
source('~/.active-rstudio-document', echo=TRUE)
head(long)
native$group
tale(native$group)
table(native$group)
head(native)
med_dice = group_by(native, mod) %>% summarise(median(dice))
med_dice
load("Reseg_Results.Rda")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
slong = filter(long,
cutoff %in% c("Smoothed"),
group %in% c("Test", "Validation"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
med_dice = group_by(native, mod) %>% summarise(median(dice))
med_dice
rownames(med_dice) = med_dice$mod
med_dice
med_dice$mod
as.character(med_dice$mod)
load("Reseg_Results.Rda")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
slong = filter(long,
cutoff %in% c("Smoothed"),
group %in% c("Test", "Validation"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
med_dice = group_by(native, mod) %>% summarise(median(dice))
rownames(med_dice) = as.character(med_dice$mod)
med_dice
load("Reseg_Results.Rda")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
slong = filter(long,
cutoff %in% c("Smoothed"),
group %in% c("Test", "Validation"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
med_dice = group_by(native, mod) %>% summarise(med = median(dice))
med_dice = as.data.frame(med_dice)
nn = as.character(med_dice$mod)
med_dice = med_dice$med
names(med_dice) = nn
med_dice
?rmultinom
x = readLines("CT_ICH_Segmentation.Rnw")
bdoc = grep("begin{document}", x)
bdoc = grep("begin\\{document\\}", x)
bdoc
x = x[-seq(bdoc)]
x = readLines("CT_ICH_Segmentation.Rnw")
row = grep("begin\\{document\\}", x)
x = x[-seq(bdoc)]
row = grep("end\\{document\\}", x)
x = x[-seq(row, length(x))]
x
x = readLines("CT_ICH_Segmentation.Rnw")
row = grep("begin\\{document\\}", x)
x = x[-seq(bdoc)]
row = grep("end\\{document\\}", x)
x = x[-seq(row, length(x))]
row = grep("(begin|end)\\{abstract\\}", x)
x = x[-seq(row[1], row[2])]
row
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Segmentation_Paper/parser.R')
outdir = path.expand("~/Dropbox/PhD_Thesis/")
fnames = c("Reseg_Result_Formats_Rigid.Rda",
"Scanning_Parameters.Rda",
"Reseg_Aggregate_data_cutoffs_Rigid.Rda",
"Reseg_111_Filenames_with_Exclusions.Rda",
"Reseg_Results.Rda",
"Reseg_Correlation_Results.Rda",
"logistic_modlist.rda",
"Patient_Demographics.csv",
"loncaric_data.txt",
"Imaging_Pipeline_Flowchart_with_Rigid.pdf",
"Reseg_Dice_Comparison.png",
"Reseg_Figure_DSI_Quantile_000_native.png",
"Reseg_Figure_DSI_Quantile_025_native.png",
"Reseg_Figure_DSI_Quantile_050_native.png",
"Reseg_Figure_DSI_Quantile_075_native.png",
"Reseg_Figure_DSI_Quantile_100_native.png",
"Reseg_Volume_Comparison.png")
file.exists(fnames)
fnames[!file.exists(fnames)]
outdir = path.expand("~/Dropbox/PhD_Thesis/")
fnames = c("Reseg_Result_Formats_Rigid.Rda",
"Scanning_Parameters.Rda",
"Reseg_Aggregate_data_cutoffs_Rigid.Rda",
"Reseg_111_Filenames_with_Exclusions.Rda",
"Reseg_Results.Rda",
"Reseg_Correlation_Results.Rda",
"logistic_modlist.rda",
"Patient_Demographics.csv",
"loncaric_data.txt",
"Imaging_Pipeline_Flowchart_with_Rigid.pdf",
"figures/Reseg_Dice_Comparison.png",
"figures/Reseg_Figure_DSI_Quantile_000_native.png",
"figures/Reseg_Figure_DSI_Quantile_025_native.png",
"figures/Reseg_Figure_DSI_Quantile_050_native.png",
"figures/Reseg_Figure_DSI_Quantile_075_native.png",
"figures/Reseg_Figure_DSI_Quantile_100_native.png",
"figures/Reseg_Volume_Comparison.png")
fnames = list.files( path = getwd(),
pattern = "Reseg_161-413_20110710_1619_CT_2_HEAD_Head_.*",
recursive = TRUE)
file.exists(fnames)
outdir = path.expand("~/Dropbox/PhD_Thesis/")
fnames = c("Reseg_Result_Formats_Rigid.Rda",
"Scanning_Parameters.Rda",
"Reseg_Aggregate_data_cutoffs_Rigid.Rda",
"Reseg_111_Filenames_with_Exclusions.Rda",
"Reseg_Results.Rda",
"Reseg_Correlation_Results.Rda",
"logistic_modlist.rda",
"Patient_Demographics.csv",
"loncaric_data.txt",
"Imaging_Pipeline_Flowchart_with_Rigid.pdf",
"figures/Reseg_Dice_Comparison.png",
"figures/Reseg_Figure_DSI_Quantile_000_native.png",
"figures/Reseg_Figure_DSI_Quantile_025_native.png",
"figures/Reseg_Figure_DSI_Quantile_050_native.png",
"figures/Reseg_Figure_DSI_Quantile_075_native.png",
"figures/Reseg_Figure_DSI_Quantile_100_native.png",
"figures/Reseg_Volume_Comparison.png")
fnames = c(fnames,
list.files( path = getwd(),
pattern = "Reseg_161-413_20110710_1619_CT_2_HEAD_Head_.*",
recursive = TRUE)
)
outdir = path.expand("~/Dropbox/PhD_Thesis/")
fnames = c("Reseg_Result_Formats_Rigid.Rda",
"Scanning_Parameters.Rda",
"Reseg_Aggregate_data_cutoffs_Rigid.Rda",
"Reseg_111_Filenames_with_Exclusions.Rda",
"Reseg_Results.Rda",
"Reseg_Correlation_Results.Rda",
"logistic_modlist.rda",
"Patient_Demographics.csv",
"loncaric_data.txt",
"Imaging_Pipeline_Flowchart_with_Rigid.pdf",
"figures/Reseg_Dice_Comparison.png",
"figures/Reseg_Figure_DSI_Quantile_000_native.png",
"figures/Reseg_Figure_DSI_Quantile_025_native.png",
"figures/Reseg_Figure_DSI_Quantile_050_native.png",
"figures/Reseg_Figure_DSI_Quantile_075_native.png",
"figures/Reseg_Figure_DSI_Quantile_100_native.png",
"figures/Reseg_Volume_Comparison.png")
fnames = c(fnames,
list.files( path = getwd(),
pattern = "Reseg_161-413_20110710_1619_CT_2_HEAD_Head_.*",
recursive = TRUE)
)
file.exists(fnames)
stopifnot(all(file.exists(fnames)))
?file.copy
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Segmentation_Paper/copier.R')
warnings()
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Segmentation_Paper/copier.R')
