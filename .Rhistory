"kurtosis" = "Neighborhood kurtosis",
"value" = "Image intensity (HU)",
"thresh" = paste0("Threshold ($\\geq$ ", lthresh, " and $\\leq$ ", uthresh, ")"),
"zscore1" = "Within-plane coronal",
"zscore2" = "Within-plane sagittal",
"zscore3" = "Within-plane axial",
"win_z" = "Winsorized standardized (20\\% trim)",
"pct_thresh" = "Percentage thresholded neighbors",
"prob_img" = "Atropos probability image",
"pct_zero_neighbor" = "Percent of zero neighbors",
"any_zero_neighbor" = "Indicator of any zero neighbors",
"dist_centroid" = "Distance to image centroid",
"smooth5" = "Gaussian smooth ($\\sigma = 5$mm$^3$)",
"smooth10" = "Gaussian smooth ($\\sigma = 10$mm$^3$)",
"smooth20" = "Gaussian smooth ($\\sigma = 20$mm$^3$)",
"zscore_template" = "Standardized-to-template intensity",
"flipped_value" = "Contralateral difference"
)
coefs = broom::tidy(logistic_modlist$mod, quick = TRUE)
coefs$term = plyr::revalue(coefs$term,
rename_vec
)
coefs
load("smoothed_logistic_cutoffs.rda")
cutoff = smoothed_logistic_cutoffs$mod.dice.coef[, "cutoff"]
x = load("Reseg_Aggregate_models_Rigid_logistic.Rda")
logistic_summary = smod
n_sum_pred = nrow(coef(logistic_summary))-1
stopifnot(n_sum_pred == 20)
rm(list = x)
load("logistic_modlist.rda")
# mod = logistic_modlist$mod
mod = logistic_summary
npred = length(coef(mod)) - 1
# npred for intercept
stopifnot(npred == 20)
rename_vec = c("(Intercept)" = "Intercept",
"moment1" = "Neighborhood mean",
"moment2" = "Neighborhood sd",
"skew" = "Neighborhood skew",
"kurtosis" = "Neighborhood kurtosis",
"value" = "Image intensity (HU)",
"thresh" = paste0("Threshold ($\\geq$ ", lthresh, " and $\\leq$ ", uthresh, ")"),
"zscore1" = "Within-plane coronal",
"zscore2" = "Within-plane sagittal",
"zscore3" = "Within-plane axial",
"win_z" = "Winsorized standardized (20\\% trim)",
"pct_thresh" = "Percentage thresholded neighbors",
"prob_img" = "Atropos probability image",
"pct_zero_neighbor" = "Percent of zero neighbors",
"any_zero_neighbor" = "Indicator of any zero neighbors",
"dist_centroid" = "Distance to image centroid",
"smooth5" = "Gaussian smooth ($\\sigma = 5$mm$^3$)",
"smooth10" = "Gaussian smooth ($\\sigma = 10$mm$^3$)",
"smooth20" = "Gaussian smooth ($\\sigma = 20$mm$^3$)",
"zscore_template" = "Standardized-to-template intensity",
"flipped_value" = "Contralateral difference"
)
coefs = broom::tidy(mod, quick = TRUE)
mod
coef(smod)
class(mod)
mod = coef(mod)
mod
coefs = broom::tidy(mod, quick = TRUE)
coefs
load("smoothed_logistic_cutoffs.rda")
cutoff = smoothed_logistic_cutoffs$mod.dice.coef[, "cutoff"]
x = load("Reseg_Aggregate_models_Rigid_logistic.Rda")
logistic_summary = smod
n_sum_pred = nrow(coef(logistic_summary))-1
stopifnot(n_sum_pred == 20)
rm(list = x)
load("logistic_modlist.rda")
# mod = logistic_modlist$mod
mod = logistic_summary
npred = length(coef(mod)) - 1
# npred for intercept
stopifnot(npred == 20)
rename_vec = c("(Intercept)" = "Intercept",
"moment1" = "Neighborhood mean",
"moment2" = "Neighborhood sd",
"skew" = "Neighborhood skew",
"kurtosis" = "Neighborhood kurtosis",
"value" = "Image intensity (HU)",
"thresh" = paste0("Threshold ($\\geq$ ", lthresh, " and $\\leq$ ", uthresh, ")"),
"zscore1" = "Within-plane coronal",
"zscore2" = "Within-plane sagittal",
"zscore3" = "Within-plane axial",
"win_z" = "Winsorized standardized (20\\% trim)",
"pct_thresh" = "Percentage thresholded neighbors",
"prob_img" = "Atropos probability image",
"pct_zero_neighbor" = "Percent of zero neighbors",
"any_zero_neighbor" = "Indicator of any zero neighbors",
"dist_centroid" = "Distance to image centroid",
"smooth5" = "Gaussian smooth ($\\sigma = 5$mm$^3$)",
"smooth10" = "Gaussian smooth ($\\sigma = 10$mm$^3$)",
"smooth20" = "Gaussian smooth ($\\sigma = 20$mm$^3$)",
"zscore_template" = "Standardized-to-template intensity",
"flipped_value" = "Contralateral difference"
)
if (inherits("mod", "summary.glm")) {
is_sum = TRUE
mod = coef(mod)
}
coefs = broom::tidy(mod, quick = TRUE)
if (is_sum) {
colnames(coefs)[1] = "term"
}
mod
load("smoothed_logistic_cutoffs.rda")
cutoff = smoothed_logistic_cutoffs$mod.dice.coef[, "cutoff"]
x = load("Reseg_Aggregate_models_Rigid_logistic.Rda")
logistic_summary = smod
n_sum_pred = nrow(coef(logistic_summary))-1
stopifnot(n_sum_pred == 20)
rm(list = x)
load("logistic_modlist.rda")
# mod = logistic_modlist$mod
mod = logistic_summary
npred = length(coef(mod)) - 1
# npred for intercept
stopifnot(npred == 20)
rename_vec = c("(Intercept)" = "Intercept",
"moment1" = "Neighborhood mean",
"moment2" = "Neighborhood sd",
"skew" = "Neighborhood skew",
"kurtosis" = "Neighborhood kurtosis",
"value" = "Image intensity (HU)",
"thresh" = paste0("Threshold ($\\geq$ ", lthresh, " and $\\leq$ ", uthresh, ")"),
"zscore1" = "Within-plane coronal",
"zscore2" = "Within-plane sagittal",
"zscore3" = "Within-plane axial",
"win_z" = "Winsorized standardized (20\\% trim)",
"pct_thresh" = "Percentage thresholded neighbors",
"prob_img" = "Atropos probability image",
"pct_zero_neighbor" = "Percent of zero neighbors",
"any_zero_neighbor" = "Indicator of any zero neighbors",
"dist_centroid" = "Distance to image centroid",
"smooth5" = "Gaussian smooth ($\\sigma = 5$mm$^3$)",
"smooth10" = "Gaussian smooth ($\\sigma = 10$mm$^3$)",
"smooth20" = "Gaussian smooth ($\\sigma = 20$mm$^3$)",
"zscore_template" = "Standardized-to-template intensity",
"flipped_value" = "Contralateral difference"
)
if (inherits(mod, "summary.glm")) {
is_sum = TRUE
mod = coef(mod)
}
coefs = broom::tidy(mod, quick = TRUE)
if (is_sum) {
colnames(coefs)[1] = "term"
}
coef
coefs
coefs$term = plyr::revalue(coefs$term,
rename_vec
)
add = NULL
if (is_sum) {
add = c("SE", "Z", "p.value")
}
colnames(coefs) = c("Predictor", "Beta", add)
add
coefs
load("smoothed_logistic_cutoffs.rda")
cutoff = smoothed_logistic_cutoffs$mod.dice.coef[, "cutoff"]
x = load("Reseg_Aggregate_models_Rigid_logistic.Rda")
logistic_summary = smod
n_sum_pred = nrow(coef(logistic_summary))-1
stopifnot(n_sum_pred == 20)
rm(list = x)
load("logistic_modlist.rda")
# mod = logistic_modlist$mod
mod = logistic_summary
npred = length(coef(mod)) - 1
# npred for intercept
stopifnot(npred == 20)
rename_vec = c("(Intercept)" = "Intercept",
"moment1" = "Neighborhood mean",
"moment2" = "Neighborhood sd",
"skew" = "Neighborhood skew",
"kurtosis" = "Neighborhood kurtosis",
"value" = "Image intensity (HU)",
"thresh" = paste0("Threshold ($\\geq$ ", lthresh, " and $\\leq$ ", uthresh, ")"),
"zscore1" = "Within-plane coronal",
"zscore2" = "Within-plane sagittal",
"zscore3" = "Within-plane axial",
"win_z" = "Winsorized standardized (20\\% trim)",
"pct_thresh" = "Percentage thresholded neighbors",
"prob_img" = "Atropos probability image",
"pct_zero_neighbor" = "Percent of zero neighbors",
"any_zero_neighbor" = "Indicator of any zero neighbors",
"dist_centroid" = "Distance to image centroid",
"smooth5" = "Gaussian smooth ($\\sigma = 5$mm$^3$)",
"smooth10" = "Gaussian smooth ($\\sigma = 10$mm$^3$)",
"smooth20" = "Gaussian smooth ($\\sigma = 20$mm$^3$)",
"zscore_template" = "Standardized-to-template intensity",
"flipped_value" = "Contralateral difference"
)
if (inherits(mod, "summary.glm")) {
is_sum = TRUE
mod = coef(mod)
}
coefs = broom::tidy(mod, quick = TRUE)
if (is_sum) {
colnames(coefs)[1] = "term"
}
coefs$term = plyr::revalue(coefs$term,
rename_vec
)
add = NULL
if (is_sum) {
add = c("SE", "Z", "p.value")
}
colnames(coefs) = c("Predictor", "Beta", add)
if (is_sum) {
coefs = coefs[, c("Predictor", "Beta", "Z")]
}
coefcap = paste0( "Beta coefficients (log odds ratio) for the logistic regression model for all coefficients.  ",
"Combining these for each voxel value and using the inverse logit transformation yields the probability that ",
"voxel is ICH. ",
"After smoothing by 1 voxel in all 3 directions, the probability cutoff for thresholding was ",
round(cutoff, 4), ".")
xtab = xtable(coefs, digits = 3, caption = coefcap, label = "tab:modspec")
coefs
library(knitcitations)
library(knitr)
knit("CT_ICH_Segmentation.Rnw")
head(fdf)
man_fdf
head(fdf)
load("Reseg_Results.Rda")
rr = load("Reseg_Results.Rda")
rr
head(fdf)
head(long)
knit("CT_ICH_Segmentation.Rnw")
library(kntir)
library(knitr)
knit("CT_ICH_Segmentation.Rnw")
long
head(long)
head(man_fdf)
dim(long)
length(unique(long$id))
length(unique(man_fdf$id))
man_dic
man_dice
g
g %+% man_dice[ man_dice$dice > 0,]
g %+% man_dice[ man_dice$dice > 0.5,]
g = man_dice %>% filter(dice > 0.5) %>%
ggplot(aes(x = man, y = dice)) +
geom_boxplot()
g = g + xlim(c(0.5, 1)) +
xlab("Manufacturer") +
ylab("Dice Similarity Index") +
theme(text = element_text(size = 24)
)
g
g = man_dice %>% filter(dice > 0.5) %>%
ggplot(aes(x = man, y = dice)) +
geom_boxplot()
g = g + xlim(c(0.5, 1)) +
xlab("Manufacturer") +
ylab("Dice Similarity Index") +
theme(text = element_text(size = 24))
g
library(ggplot2)
g = man_dice %>% filter(dice > 0.5) %>%
ggplot(aes(x = man, y = dice)) +
geom_boxplot()
g = g + ylim(c(0.5, 1)) +
xlab("Manufacturer") +
ylab("Dice Similarity Index") +
theme(text = element_text(size = 24))
g
all()
alltabs
names(alltabs[[1]])
grep("0008-1090", names(alltabs[[1]]))
grep("0008-1090", names(alltabs[[1]]), value = TRUE)
models = lapply(alltabs, function(x) {
unique(x[[ "0008-1090-ManufacturerModelName"]])
})
stopifnot(all(sapply(models, length) == 1))
models = unlist(models)
models
man = lapply(alltabs, function(x) {
unique(x[["0008-0070-Manufacturer"]])
})
stopifnot(all(sapply(man, length) == 1))
man = unlist(man)
models = lapply(alltabs, function(x) {
unique(x[[ "0008-1090-ManufacturerModelName"]])
})
stopifnot(all(sapply(models, length) == 1))
models = unlist(models)
fdf$man = man
fdf$model = models
fdf$man[fdf$man == 'TOSHIBA'] = "Toshiba"
fdf$man[fdf$man == 'SIEMENS'] = "Siemens"
man_fdf = fdf[, c("id", "pid", "man")]
# man = sapply(man, unique)
knit("CT_ICH_Segmentation.Rnw")
man_fdf
head(man_fdf)
man_dice
head(man_dice)
head(man_dice$model)
unique(man_dice$model)
man_dice %>% filter(model == "OsiriX")
arr = array(abs(rnorm(10^3)), dim = rep(10, 3))
library(EBImage)
as.Image(arr)
arr = as.Image(arr)
display(arr)
system("open .")
load("Reseg_Results.Rda")
fdf
x = load("Reseg_111_Filenames_with_volumes.Rda")
x
load("Reseg_111_Filenames_with_Exclusions.Rda")
voldf = fdf
head(voldf)
x = load("Reseg_111_Filenames_with_volumes.Rda")
x
colnames(x)
colnames(fdf)
man_dice
knit("CT_ICH_Segmentation.Rnw")
library(knitr)
knit("CT_ICH_Segmentation.Rnw")
hu_df
head(hu_df)
man_dice
man_dice$id
dice
dice = filter(native, mod %in% "rf")
dice
colnames(dice)
colnames(native)
head(native)
load("Reseg_111_Filenames_with_volumes.Rda")
hu_df = fdf[, c("id", "mean", "median", "sd")]
load("Reseg_Results.Rda")
run_group = c("Test", "Validation")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
long = filter(long,
group %in% c("Test", "Validation"))
slong = filter(long,
cutoff %in% c("Smoothed"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
dice = filter(native, mod %in% "rf")
man_dice = left_join(
dice %>%
select(iimg, id, dice, group),
man_fdf, by = "id")
man_dice = left_join(
man_dice,
hu_df,
by = "id")
head(man_dice)
plot(man_dice$mean, man_dice$dice)
plot(man_dice$median, man_dice$dice)
head(man_dice)
head(dice)
load("Reseg_111_Filenames_with_volumes.Rda")
hu_df = fdf[, c("id", "mean", "median", "sd")]
load("Reseg_Results.Rda")
run_group = c("Test", "Validation")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
long = filter(long,
group %in% c("Test", "Validation"))
slong = filter(long,
cutoff %in% c("Smoothed"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
dice = filter(native, mod %in% "rf")
man_dice = left_join(
dice %>%
select(iimg, id, dice, group, truevol, estvol),
man_fdf, by = "id")
man_dice = left_join(
man_dice,
hu_df,
by = "id")
plot(man_dice$truevol, man_dice$dice)
head(man_dice)
heaD(long)
head(long)
load("Reseg_111_Filenames_with_volumes.Rda")
hu_df = fdf[, c("id", "mean", "median", "sd")]
load("Reseg_Results.Rda")
run_group = c("Test", "Validation")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
long = filter(long,
group %in% c("Test", "Validation"))
slong = filter(long,
cutoff %in% c("Smoothed"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
dice = filter(native, mod %in% "rf")
man_dice = left_join(
dice %>%
select(iimg, id, dice, group, truevol, estvol) %>%
mutate(truevol = truevol / 1000,
estvol = estvol / 1000),
man_fdf, by = "id")
man_dice = left_join(
man_dice,
hu_df,
by = "id")
head(man_dice)
plot(man_dice$truevol, man_dice$dice)
?ortho2
file = "~/Desktop/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz"
mask = NULL
robust = FALSE
ears = ct_ear_mask(
file = file,
robust = FALSE
)
img = readnii(file)
rimg = randomize_mask(img, mask = face)
rimg = randomize_mask(img, mask = ears)
ortho2(rimg)
ortho2(rimg,xyz =xyz(ears))
ortho2(rimg, ears, xyz = xyz(ears))
file = "~/Desktop/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz"
mask = NULL
robust = FALSE
face = ct_face_mask(
file = file,
robust = FALSE,
template.mask = system.file("scct_unsmooth_SS_0.01_Mask.nii.gz",
package = "ichseg")
)
img = readnii(file)
rimg = randomize_mask(img, mask = face)
ortho2(rimg, xyz = xyz(face))
