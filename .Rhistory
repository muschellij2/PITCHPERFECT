long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
slong = filter(long,
cutoff %in% c("Smoothed"),
group %in% c("Test", "Validation"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
med_dice = group_by(native, mod) %>% summarise(median(dice))
med_dice
rownames(med_dice) = med_dice$mod
med_dice
med_dice$mod
as.character(med_dice$mod)
load("Reseg_Results.Rda")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
slong = filter(long,
cutoff %in% c("Smoothed"),
group %in% c("Test", "Validation"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
med_dice = group_by(native, mod) %>% summarise(median(dice))
rownames(med_dice) = as.character(med_dice$mod)
med_dice
load("Reseg_Results.Rda")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
slong = filter(long,
cutoff %in% c("Smoothed"),
group %in% c("Test", "Validation"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
med_dice = group_by(native, mod) %>% summarise(med = median(dice))
med_dice = as.data.frame(med_dice)
nn = as.character(med_dice$mod)
med_dice = med_dice$med
names(med_dice) = nn
med_dice
?rmultinom
x = readLines("CT_ICH_Segmentation.Rnw")
bdoc = grep("begin{document}", x)
bdoc = grep("begin\\{document\\}", x)
bdoc
x = x[-seq(bdoc)]
x = readLines("CT_ICH_Segmentation.Rnw")
row = grep("begin\\{document\\}", x)
x = x[-seq(bdoc)]
row = grep("end\\{document\\}", x)
x = x[-seq(row, length(x))]
x
x = readLines("CT_ICH_Segmentation.Rnw")
row = grep("begin\\{document\\}", x)
x = x[-seq(bdoc)]
row = grep("end\\{document\\}", x)
x = x[-seq(row, length(x))]
row = grep("(begin|end)\\{abstract\\}", x)
x = x[-seq(row[1], row[2])]
row
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Segmentation_Paper/parser.R')
outdir = path.expand("~/Dropbox/PhD_Thesis/")
fnames = c("Reseg_Result_Formats_Rigid.Rda",
"Scanning_Parameters.Rda",
"Reseg_Aggregate_data_cutoffs_Rigid.Rda",
"Reseg_111_Filenames_with_Exclusions.Rda",
"Reseg_Results.Rda",
"Reseg_Correlation_Results.Rda",
"logistic_modlist.rda",
"Patient_Demographics.csv",
"loncaric_data.txt",
"Imaging_Pipeline_Flowchart_with_Rigid.pdf",
"Reseg_Dice_Comparison.png",
"Reseg_Figure_DSI_Quantile_000_native.png",
"Reseg_Figure_DSI_Quantile_025_native.png",
"Reseg_Figure_DSI_Quantile_050_native.png",
"Reseg_Figure_DSI_Quantile_075_native.png",
"Reseg_Figure_DSI_Quantile_100_native.png",
"Reseg_Volume_Comparison.png")
file.exists(fnames)
fnames[!file.exists(fnames)]
outdir = path.expand("~/Dropbox/PhD_Thesis/")
fnames = c("Reseg_Result_Formats_Rigid.Rda",
"Scanning_Parameters.Rda",
"Reseg_Aggregate_data_cutoffs_Rigid.Rda",
"Reseg_111_Filenames_with_Exclusions.Rda",
"Reseg_Results.Rda",
"Reseg_Correlation_Results.Rda",
"logistic_modlist.rda",
"Patient_Demographics.csv",
"loncaric_data.txt",
"Imaging_Pipeline_Flowchart_with_Rigid.pdf",
"figures/Reseg_Dice_Comparison.png",
"figures/Reseg_Figure_DSI_Quantile_000_native.png",
"figures/Reseg_Figure_DSI_Quantile_025_native.png",
"figures/Reseg_Figure_DSI_Quantile_050_native.png",
"figures/Reseg_Figure_DSI_Quantile_075_native.png",
"figures/Reseg_Figure_DSI_Quantile_100_native.png",
"figures/Reseg_Volume_Comparison.png")
fnames = list.files( path = getwd(),
pattern = "Reseg_161-413_20110710_1619_CT_2_HEAD_Head_.*",
recursive = TRUE)
file.exists(fnames)
outdir = path.expand("~/Dropbox/PhD_Thesis/")
fnames = c("Reseg_Result_Formats_Rigid.Rda",
"Scanning_Parameters.Rda",
"Reseg_Aggregate_data_cutoffs_Rigid.Rda",
"Reseg_111_Filenames_with_Exclusions.Rda",
"Reseg_Results.Rda",
"Reseg_Correlation_Results.Rda",
"logistic_modlist.rda",
"Patient_Demographics.csv",
"loncaric_data.txt",
"Imaging_Pipeline_Flowchart_with_Rigid.pdf",
"figures/Reseg_Dice_Comparison.png",
"figures/Reseg_Figure_DSI_Quantile_000_native.png",
"figures/Reseg_Figure_DSI_Quantile_025_native.png",
"figures/Reseg_Figure_DSI_Quantile_050_native.png",
"figures/Reseg_Figure_DSI_Quantile_075_native.png",
"figures/Reseg_Figure_DSI_Quantile_100_native.png",
"figures/Reseg_Volume_Comparison.png")
fnames = c(fnames,
list.files( path = getwd(),
pattern = "Reseg_161-413_20110710_1619_CT_2_HEAD_Head_.*",
recursive = TRUE)
)
outdir = path.expand("~/Dropbox/PhD_Thesis/")
fnames = c("Reseg_Result_Formats_Rigid.Rda",
"Scanning_Parameters.Rda",
"Reseg_Aggregate_data_cutoffs_Rigid.Rda",
"Reseg_111_Filenames_with_Exclusions.Rda",
"Reseg_Results.Rda",
"Reseg_Correlation_Results.Rda",
"logistic_modlist.rda",
"Patient_Demographics.csv",
"loncaric_data.txt",
"Imaging_Pipeline_Flowchart_with_Rigid.pdf",
"figures/Reseg_Dice_Comparison.png",
"figures/Reseg_Figure_DSI_Quantile_000_native.png",
"figures/Reseg_Figure_DSI_Quantile_025_native.png",
"figures/Reseg_Figure_DSI_Quantile_050_native.png",
"figures/Reseg_Figure_DSI_Quantile_075_native.png",
"figures/Reseg_Figure_DSI_Quantile_100_native.png",
"figures/Reseg_Volume_Comparison.png")
fnames = c(fnames,
list.files( path = getwd(),
pattern = "Reseg_161-413_20110710_1619_CT_2_HEAD_Head_.*",
recursive = TRUE)
)
file.exists(fnames)
stopifnot(all(file.exists(fnames)))
?file.copy
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Segmentation_Paper/copier.R')
warnings()
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Segmentation_Paper/copier.R')
x = readLines("CT_ICH_Segmentation.Rnw")
row = grep("begin\\{document\\}", x)
x = x[-seq(1, row)]
row = grep("end\\{document\\}", x)
x = x[-seq(row, length(x))]
row = grep("end\\{frontmatter\\}", x)
x = x[-seq(1, row)]
x
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Segmentation_Paper/parser.R')
library(rmarkdown)
library(knitr)
knit("CT_ICH_Segmentation.Rnw")
{corrdata["rf", "cor"]}
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Segmentation_Paper/Reseg_VarImpPlot.R')
library(knite)
library(knitr)
plot_crop(pngname)
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Segmentation_Paper/Reseg_VarImpPlot.R')
dotchart
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Segmentation_Paper/Reseg_VarImpPlot.R')
rf_modlist$mod.dice.coef
rf_modlist$mod.dice.coef[,"cutoff"]
rf_modlist$mod.dice.coef[1,"cutoff"]
source('~/Dropbox/CTR/DHanley/CT_Registration/programs/Reseg/Reseg_Figures_for_Paper.R')
load("Reseg_Results.Rda")
dir()
ls()
long
head(long)_
head(long)
run_group = c("Test", "Validation")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
long = filter(long,
group %in% c("Test", "Validation"))
slong = filter(long,
cutoff %in% c("Smoothed"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
library(plyr)
library(dplyr)
run_group = c("Test", "Validation")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
long = filter(long,
group %in% c("Test", "Validation"))
slong = filter(long,
cutoff %in% c("Smoothed"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
library(reshape2)
run_group = c("Test", "Validation")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
long = filter(long,
group %in% c("Test", "Validation"))
slong = filter(long,
cutoff %in% c("Smoothed"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
native
load("Reseg_Results.Rda")
run_group = c("Test", "Validation")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
long = filter(long,
group %in% c("Test", "Validation"))
slong = filter(long,
cutoff %in% c("Smoothed"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
native
dice = filter(native, mod %in% "rf")
dice
dim(dice)
head(dice)
fdf
rda = "Scanning_Parameters.Rda"
load(rda)
fdf$site_number = sapply(strsplit(fdf$id, "-"), `[[`, 1)
fdf$pid = as.numeric(gsub("-", "", fdf$id))
man = lapply(alltabs, `[[`, "0008-0070-Manufacturer")
man = sapply(man, unique)
man
alltabs
names(alltabs)
fdf
rda = "Scanning_Parameters.Rda"
load(rda)
fdf$site_number = sapply(strsplit(fdf$id, "-"), `[[`, 1)
fdf$pid = as.numeric(gsub("-", "", fdf$id))
man = lapply(alltabs, `[[`, "0008-0070-Manufacturer")
man = sapply(man, unique)
stopifnot(nrow(fdf) == 112)
stopifnot(length(unique(fdf$id)) == 112)
head(fdf)
###################################################################
## This code is for Image Segmentation of CT
## The code is R but calls out FSL
##
## Author: John Muschelli
## Last updated: May 20, 2014
###################################################################
rm(list=ls())
library(plyr)
library(fslr)
homedir = "/Applications"
rootdir = "/Volumes/DATA_LOCAL/Image_Processing"
if (Sys.info()[["user"]] %in% "jmuschel") {
homedir = "~"
rootdir = "/dexter/disk2/smart/stroke_ct/ident"
}
progdir = file.path(rootdir, "programs")
segdir = file.path(progdir, "Segmentation")
basedir = file.path(rootdir, "Registration")
tempdir = file.path(rootdir, "Template")
atlasdir = file.path(tempdir, "atlases")
outdir = file.path(basedir, "results")
#### load voxel data
outfile = file.path(outdir, "Voxel_Info.Rda")
load(file=outfile )
outfile = file.path(outdir, "111_Filenames_with_volumes_stats.Rda")
xxx = load(file = outfile)
iimg <- suppressWarnings(as.numeric(Sys.getenv("SGE_TASK_ID")))
if (is.na(iimg)) iimg = 34
## 2,12,17,34,37, 46, 48, 68, 70,81, 85, 86, 87, 99
#  has variable slice thickness
## 15 is not correct for sthickness
## 17 & 87 worst - has overlapping slice somewhat
## 75 has all negative
## 71 has no position data
## 13,71,101 has spacing
fdf$median = fdf$mode = fdf$mean = NA
fdf$thickvol = fdf$zvol = fdf$varslice =
fdf$gantry = fdf$truevol = NA
# fdf = fdf[c(2,12,17,34,37, 46, 48, 68, 70,81, 85, 86, 87, 99),]
# dcmtables[, '0018-1152-Exposure']
alltabs = exposures = vector(mode="list", length=nrow(fdf))
vdims = exposures
for (iimg in seq(nrow(fdf))){
runx = x = fdf[iimg,]
sortdir = file.path(x$iddir, "Sorted")
# run_model = function(x, fpr.stop = .1){
fname = xfname = nii.stub(x$img, bn=TRUE)
rda_stub = file.path(sortdir, fname)
rda = paste0(rda_stub, "_ungantry_Header_Info.Rda")
if (file.exists(rda)){
# stop("OK here's one")
} else {
rda = paste0(rda_stub, "_Header_Info.Rda")
}
xrda = load(rda)
alltabs[[iimg]] = dcmtables
vdims[[iimg]] = voxdim(x$ssimg)
# print(grep("pac", colnames(dcmtables), value=TRUE))
# print(iimg)
# cn = c("0018-5100-PatientPosition",
# 	"0020-0032-ImagePositionPatient")
###############################
# Slice thickness or Patient position?
###############################
gant = unique(as.numeric(
dcmtables[, "0018-1120-GantryDetectorTilt"]))
stopifnot(length(gant) == 1)
cn = c("0020-0032-ImagePositionPatient")
dcmnames = colnames(dcmtables)
expo = dcmtables[,
grepl("xposure", dcmnames) |
grepl("KVP", toupper(dcmnames)) |
grepl("ROW", toupper(dcmnames)) |
grepl("COLUMN", toupper(dcmnames)) |
grepl("PixelSpacing", dcmnames) |
grepl("SliceThickness", dcmnames)
,
drop=FALSE]
rownames(expo) = NULL
exposures[[iimg]] = expo
}
ex = lapply(exposures, function(x){
cn = colnames(x)
last = function(r) r[length(r)]
cn = sapply(strsplit(cn, "-"), last)
colnames(x) = cn
x
})
vdims = do.call("rbind", vdims)
vsizes = apply(vdims, 1, prod)
st = as.numeric(
unlist(sapply(sapply(ex, `[[`, "SliceThickness"),
unique)))
st = sort(unique(st))
ps = unique(
unlist(sapply(sapply(ex, `[[`, "PixelSpacing"),
unique)))
ps = as.numeric(sapply(strsplit(ps, " "), `[`, 1))
ps = sort(unique(ps))
kvps = unique(unlist(sapply(sapply(ex, `[[`, "KVP"), unique)))
kvps = sort(kvps[!kvps %in% c("")])
kvps = kvps[!is.na(kvps)]
kvps = sort(as.numeric(kvps))
exps = sapply(ex, function(x){
cn = colnames(x)
if ("Exposure" %in% x){
} else {
return(NA)
}
})
exps = unique(unlist(sapply(sapply(ex, `[[`, "Exposure"), unique)))
exps = exps[!exps %in% c("")]
exps = exps[!is.na(exps)]
exps = sort(as.numeric(exps))
