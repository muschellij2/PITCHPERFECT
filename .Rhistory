stopifnot(all(!is.na(man_dice$ich_cat)))
# levels(man_dice$ich_cat)
g = man_dice %>%
ggplot(aes(x = ich_cat, y = dice)) +
geom_boxplot(outlier.size = NA, fill = NA)
g = g + geom_point(position = position_jitter(width = 0.2))
g = g +
xlab("Hemorrhage Size Category") +
ylab("Dice Similarity Index") +
theme(text = element_text(size = 24))
g = g + scale_y_continuous(
breaks = c(0, 0.25, 0.5, 0.75, 1),
limits = c(0, 1))
print({g + geom_text(aes(x = 3, y = 0.125, label = "A"), size = 30)})
g = man_dice %>%
ggplot(aes(x = ich_cat, y = dice)) +
geom_boxplot(outlier.size = NA, fill = NA)
g = g + geom_point(position = position_jitter(width = 0.2))
g
g = g +
xlab("Hemorrhage Size Category") +
ylab("Dice Similarity Index") +
theme(text = element_text(size = 24))
g
g = g + scale_y_continuous(
breaks = c(0, 0.25, 0.5, 0.75, 1),
limits = c(0, 1))
g
g = man_dice %>%
ggplot(aes(y = dice)) +
geom_point() + geom_smooth(se = FALSE)
g = g +
ylab("Dice Similarity Index") +
theme(text = element_text(size = 24))
g = g + scale_y_continuous(
breaks = c(0, 0.25, 0.5, 0.75, 1),
limits = c(0, 1))
g_mean = g + aes(x = mean) + xlab("Hemorrhage Mean Hounsfield Unit")
g_med = g + aes(x = median) + xlab("Hemorrhage Median Hounsfield Unit")
g_mean
g = man_dice %>%
ggplot(aes(x = ich_cat, y = dice)) +
geom_boxplot(outlier.size = NA, fill = NA)
g
g = g + geom_point(position = position_jitter(width = 0.2))
g
g = g +
xlab("Hemorrhage Size Category") +
ylab("Dice Similarity Index") +
theme(text = element_text(size = 24))
g = g + scale_y_continuous(
breaks = c(0, 0.25, 0.5, 0.75, 1),
limits = c(0, 1))
g
g = man_dice %>%
ggplot(aes(x = ich_cat, y = dice)) +
geom_boxplot(outlier.size = NA, fill = NA)
g = g + geom_point(position = position_jitter(width = 0.2))
g = g +
xlab("Hemorrhage Size Category") +
ylab("Dice Similarity Index") +
theme(text = element_text(size = 24))
g = g + scale_y_continuous(
breaks = c(-0.01, 0.25, 0.5, 0.75, 1),
limits = c(0, 1))
g
?scale_y_continuous
# levels(man_dice$ich_cat)
g = man_dice %>%
ggplot(aes(x = ich_cat, y = dice)) +
geom_boxplot(outlier.size = NA, fill = NA)
g = g + geom_point(position = position_jitter(width = 0.2))
g = g +
xlab("Hemorrhage Size Category") +
ylab("Dice Similarity Index") +
theme(text = element_text(size = 24))
g = g + scale_y_continuous(
breaks = c(-0.000000000001, 0.25, 0.5, 0.75, 1),
limits = c(0, 1))
g
man$ich
man$ich_
man_dice$ich_cat
man_dice$ich_cat = cut(man_dice$truevol,
breaks = c(0, 30, 60, max(man_dice$truevol)),
include.lowest = TRUE)
stopifnot(all(!is.na(man_dice$ich_cat)))
# levels(man_dice$ich_cat)
g = man_dice %>%
ggplot(aes(x = ich_cat, y = dice)) +
geom_boxplot(outlier.size = NA, fill = NA)
g = g + geom_point(position = position_jitter(width = 0.2))
g = g +
xlab("Hemorrhage Size Category") +
ylab("Dice Similarity Index") +
theme(text = element_text(size = 24))
g = g + scale_y_continuous(
breaks = c(0, 0.25, 0.5, 0.75, 1),
limits = c(0, 1))
g
min(man_dice$dice)
?scale_y_continuous
g = man_dice %>%
ggplot(aes(x = ich_cat, y = dice)) +
geom_boxplot(outlier.size = NA, fill = NA)
g = g + geom_point(position = position_jitter(width = 0.2))
g = g +
xlab("Hemorrhage Size Category") +
ylab("Dice Similarity Index") +
theme(text = element_text(size = 24))
g = g + scale_y_continuous(
breaks = c(0, 0.25, 0.5, 0.75, 1),
limits = c(NA, 1))
g
man_dice$ich_cat = cut(man_dice$truevol,
breaks = c(0, 30, 60, max(man_dice$truevol)),
include.lowest = TRUE)
stopifnot(all(!is.na(man_dice$ich_cat)))
# levels(man_dice$ich_cat)
g = man_dice %>%
ggplot(aes(x = ich_cat, y = dice)) +
geom_boxplot(outlier.size = NA, fill = NA)
g = g + geom_point(position = position_jitter(width = 0.2))
g = g +
xlab("Hemorrhage Size Category") +
ylab("Dice Similarity Index") +
theme(text = element_text(size = 24))
g = g + scale_y_continuous(
breaks = c(0, 0.25, 0.5, 0.75, 1),
limits = c(NA, 1))
print({g + geom_text(aes(x = 3, y = 0.125, label = "A"), size = 30)})
g = g + scale_y_continuous(
breaks = c(0.5, 0.75, 1),
limits = c(0.5, 1))
g = g + geom_text(aes(x = 3, y = 0.5625, label = "B"), size = 30)
g
system('open .')
library(knitr)
knit("CT_ICH_Segmentation.Rnw")
stopifnot(!any(man_dice$group %in% "Train"))
vals = man_dice %>% group_by(man) %>%
summarise(mean = mean(dice),
sd = sd(dice),
median = median(dice))
kt = kruskal.test(dice ~ factor(man), data = man_dice)
eg = t(combn(unique(man_dice$man), 2))
eg = data.frame(eg, stringsAsFactors = FALSE)
colnames(eg) = c("Var1", "Var2")
eg$p.value = eg$statistic = NA
if (kt$p.value < 0.05) {
ieg = 1
for (ieg in seq(nrow(eg))) {
man1 = eg$Var1[ieg]
man2 = eg$Var2[ieg]
wt = wilcox.test(dice ~ factor(man),
data = man_dice %>% filter(man %in% c(man1, man2)))
eg$p.value[ieg] = wt$p.value
eg$statistic[ieg] = wt$statistic
}
eg$adj = p.adjust(eg$p.value, method = "bonferroni")
eg
vals
rownames(vals) = vals$man
vals
testing that no training data got in here somehow
stopifnot(!any(man_dice$group %in% "Train"))
# Getting the median/mean/sd for each manufacturer
vals = man_dice %>% group_by(man) %>%
summarise(mean = mean(dice),
sd = sd(dice),
median = median(dice)) %>%
as.data.frame
rownames(vals) = vals$man
vals
table(man_dice$ich_cat)
tab = table(man_dice$ich_cat)
tab["[0-30]"]
tab[["[0-30]"]]
tab[,"[0-30]"]
tab["[0-30]"]
names(tab)
tab["[0,30]"]
prop.table(tab)
sum(tab)
tab = table(man_dice$ich_cat)
ptab = round(prop.table(tab) * 100, 1)
ptab
# Getting the median/mean/sd for each manufacturer
ivals = man_dice %>% group_by(ich_cat) %>%
summarise(mean = mean(dice),
sd = sd(dice),
median = median(dice)) %>%
as.data.frame
rownames(ivals) = ivals$ich_cat
ivals$median = round(ivals$median, 2)
ivals
kt = kruskal.test(dice ~ ich_cat, data = man_dice)
kt$p.value
kt = kruskal.test(dice ~ ich_cat, data = man_dice)
eg = t(combn(unique(man_dice$ich_cat), 2))
eg = data.frame(eg, stringsAsFactors = FALSE)
colnames(eg) = c("Var1", "Var2")
eg
kt = kruskal.test(dice ~ ich_cat, data = man_dice)
eg = t(combn(unique(man_dice$ich_cat), 2))
eg
eg = t(combn(unique(as.character(man_dice$ich_cat)), 2))
eg = data.frame(eg, stringsAsFactors = FALSE)
colnames(eg) = c("Var1", "Var2")
eg$p.value = eg$statistic = NA
eg
if (kt$p.value < 0.05) {
ieg = 1
for (ieg in seq(nrow(eg))) {
man1 = eg$Var1[ieg]
man2 = eg$Var2[ieg]
wt = wilcox.test(dice ~ factor(man),
data = man_dice %>% filter(man %in% c(man1, man2)))
eg$p.value[ieg] = wt$p.value
eg$statistic[ieg] = wt$statistic
}
ng medians across manufacturers
kt = kruskal.test(dice ~ ich_cat, data = man_dice)
eg = t(combn(unique(as.character(man_dice$ich_cat)), 2))
eg = data.frame(eg, stringsAsFactors = FALSE)
colnames(eg) = c("Var1", "Var2")
eg$p.value = eg$statistic = NA
testing medians across manufacturers
kt = kruskal.test(dice ~ ich_cat, data = man_dice)
eg = t(combn(unique(as.character(man_dice$ich_cat)), 2))
eg = data.frame(eg, stringsAsFactors = FALSE)
colnames(eg) = c("Var1", "Var2")
eg$p.value = eg$statistic = NA
eg
ieg = 1
man1 = eg$Var1[ieg]
man2 = eg$Var2[ieg]
tab = table(man_dice$ich_cat)
ptab = round(prop.table(tab) * 100, 1)
# Getting the median/mean/sd for each manufacturer
ivals = man_dice %>% group_by(ich_cat) %>%
summarise(mean = mean(dice),
sd = sd(dice),
median = median(dice)) %>%
as.data.frame
rownames(ivals) = ivals$ich_cat
ivals$median = round(ivals$median, 2)
# testing medians across manufacturers
kt = kruskal.test(dice ~ ich_cat, data = man_dice)
eg = t(combn(unique(as.character(man_dice$ich_cat)), 2))
eg = data.frame(eg, stringsAsFactors = FALSE)
colnames(eg) = c("Var1", "Var2")
eg$p.value = eg$statistic = NA
# Getting the combination of tests for wilcox
if (kt$p.value < 0.05) {
ieg = 1
for (ieg in seq(nrow(eg))) {
man1 = eg$Var1[ieg]
man2 = eg$Var2[ieg]
wt = wilcox.test(dice ~ ich_cat,
data = man_dice %>% filter(ich_cat %in% c(man1, man2)))
eg$p.value[ieg] = wt$p.value
eg$statistic[ieg] = wt$statistic
}
eg
eg$adj = p.adjust(eg$p.value, method = "bonferroni")
eg
stopifnot(!any(man_dice$group %in% "Train"))
# Getting the median/mean/sd for each manufacturer
vals = man_dice %>% group_by(man) %>%
summarise(mean = mean(dice),
sd = sd(dice),
median = median(dice)) %>%
as.data.frame
rownames(vals) = vals$man
vals$median = round(vals$median, 2)
# testing medians across manufacturers
kt = kruskal.test(dice ~ factor(man), data = man_dice)
eg = t(combn(unique(man_dice$man), 2))
eg = data.frame(eg, stringsAsFactors = FALSE)
colnames(eg) = c("Var1", "Var2")
eg$p.value = eg$statistic = NA
# Getting the combination of tests for wilcox
if (kt$p.value < 0.05) {
ieg = 1
for (ieg in seq(nrow(eg))) {
man1 = eg$Var1[ieg]
man2 = eg$Var2[ieg]
wt = wilcox.test(dice ~ factor(man),
data = man_dice %>% filter(man %in% c(man1, man2)))
eg$p.value[ieg] = wt$p.value
eg$statistic[ieg] = wt$statistic
}
# adjusting p-values
eg$adj = p.adjust(eg$p.value, method = "bonferroni")
eg
kt$statistic
kt
kt$parameter
kt$statistic
kt$p.value
round(kt$p.value, 3)
eg
wt$statistic
wt
wt$statistic
eg
sig = eg[ eg$adj < 0.05]
sig = eg[ eg$adj < 0.05, ]
sig
sig$adj
sig = eg[ eg$adj < 0.05, , drop = FALSE]
sieg
round(sig$p.value, 3)
tab = table(man_dice$ich_cat)
ptab = round(prop.table(tab) * 100, 1)
ivals = man_dice %>% group_by(ich_cat) %>%
summarise(mean = mean(dice),
sd = sd(dice),
median = median(dice)) %>%
as.data.frame
rownames(ivals) = ivals$ich_cat
ivals$median = round(ivals$median, 2)
kt = kruskal.test(dice ~ ich_cat, data = man_dice)
kt
tab = table(man_dice$ich_cat)
ptab = round(prop.table(tab) * 100, 1)
# Getting the median/mean/sd for each manufacturer
ivals = man_dice %>% group_by(ich_cat) %>%
summarise(mean = mean(dice),
sd = sd(dice),
median = median(dice)) %>%
as.data.frame
rownames(ivals) = ivals$ich_cat
ivals$median = round(ivals$median, 2)
# testing medians across manufacturers
kt = kruskal.test(dice ~ ich_cat, data = man_dice)
eg = t(combn(unique(as.character(man_dice$ich_cat)), 2))
eg = data.frame(eg, stringsAsFactors = FALSE)
colnames(eg) = c("Var1", "Var2")
eg$p.value = eg$statistic = NA
# Getting the combination of tests for wilcox
if (kt$p.value < 0.05) {
ieg = 1
for (ieg in seq(nrow(eg))) {
man1 = eg$Var1[ieg]
man2 = eg$Var2[ieg]
wt = wilcox.test(dice ~ ich_cat,
data = man_dice %>% filter(ich_cat %in% c(man1, man2)))
eg$p.value[ieg] = wt$p.value
eg$statistic[ieg] = wt$statistic
}
# adjusting p-values
eg$adj = p.adjust(eg$p.value, method = "bonferroni")
eg
tab = table(man_dice$ich_cat)
ptab = round(prop.table(tab) * 100, 1)
# Getting the median/mean/sd for each manufacturer
ivals = man_dice %>% group_by(ich_cat) %>%
summarise(mean = mean(dice),
sd = sd(dice),
median = median(dice)) %>%
as.data.frame
rownames(ivals) = ivals$ich_cat
ivals$median = round(ivals$median, 2)
# testing medians across manufacturers
kt = kruskal.test(dice ~ ich_cat, data = man_dice)
eg = t(combn(unique(as.character(man_dice$ich_cat)), 2))
eg = data.frame(eg, stringsAsFactors = FALSE)
colnames(eg) = c("Var1", "Var2")
eg$p.value = eg$statistic = NA
# Getting the combination of tests for wilcox
if (kt$p.value < 0.05) {
ieg = 1
for (ieg in seq(nrow(eg))) {
man1 = eg$Var1[ieg]
man2 = eg$Var2[ieg]
wt = wilcox.test(dice ~ ich_cat,
data = man_dice %>% filter(ich_cat %in% c(man1, man2)))
eg$p.value[ieg] = wt$p.value
eg$statistic[ieg] = wt$statistic
}
# adjusting p-values
eg$adj = p.adjust(eg$p.value, method = "bonferroni")
sig = eg[ eg$adj < 0.06, , drop = FALSE]
sig
man_dice
head(fdf)
head(ivh)
head(man_dice)
man_dice %>% arrange(-Pre_Rand_IVHvol) %>% head(2)
load("Reseg_111_Filenames_with_volumes.Rda")
hu_df = fdf[, c("id", "mean", "median", "sd")]
load("Reseg_Results.Rda")
run_group = c("Test", "Validation")
long = filter(long,
cutoff %in% c("cc", "scc"))
long$cutoff = revalue(long$cutoff,
c("cc"= "Unsmoothed",
"scc" = "Smoothed")
)
long = mutate(long,
mean = (tvol + evol) /2,
diff = tvol - evol
)
all_long = long
long = filter(long,
group %in% c("Test", "Validation"))
slong = filter(long,
cutoff %in% c("Smoothed"))
nlong = filter(slong, app %in% "Native")
llong = select(nlong, mod,
dice, sens, accur,
spec, iimg, group)
llong = melt(llong,
id.vars = c("iimg", "group", "mod"))
relev2 = c("dice" = "Dice Similarity Index",
"accur" = "Accuracy",
"sens" = "Sensitivity",
"spec" = "Specificity")
llong$variable = revalue(llong$variable,
relev2
)
llong$variable = factor(llong$variable,
levels = relev2)
native = filter(slong, app %in% "Native")
dice = filter(native, mod %in% "rf")
all_dice = filter(all_long,
cutoff %in% c("Smoothed"),
app %in% "Native",
mod %in% "rf")
check_ids = function(ids) {
stopifnot(all(all_dice$id %in% ids))
}
check_ids(man_fdf$id)
check_ids(hu_df$id)
check_ids(ivh$id)
man_dice = left_join(
all_dice %>%
select(iimg, id, dice, group, truevol, estvol) %>%
mutate(truevol = truevol / 1000,
estvol = estvol / 1000),
man_fdf, by = "id")
man_dice = left_join(
man_dice,
hu_df,
by = "id")
man_dice = left_join(
man_dice,
ivh,
by = "id")
train_man = filter(man_dice, group %in% "Train")
man_dice = filter(man_dice, !group %in% "Train")
man_dice$ich_cat = cut(man_dice$truevol,
breaks = c(0, 30, 60, max(man_dice$truevol)),
include.lowest = TRUE)
man_dice$pre_ich_cat = cut(man_dice$Pre_Rand_ICHvol,
breaks = c(0, 30, 60, max(man_dice$truevol)),
include.lowest = TRUE)
stopifnot(all(!is.na(man_dice$ich_cat)))
stopifnot(all(!is.na(man_dice$pre_ich_cat)))
table(man_dice$pre_ich_cat, man_dice$ich_cat)
table(man_dice$pre_ich_cat)
tab = table(man_dice$pre_ich_cat)
ptab = round(prop.table(tab) * 100, 1)
# Getting the median/mean/sd for each manufacturer
ivals = man_dice %>% group_by(pre_ich_cat) %>%
summarise(mean = mean(dice),
sd = sd(dice),
median = median(dice)) %>%
as.data.frame
rownames(ivals) = ivals$pre_ich_cat
ivals$median = round(ivals$median, 2)
tab
kt
kt = kruskal.test(dice ~ pre_ich_cat, data = man_dice)
kt
tab = table(man_dice$pre_ich_cat)
ptab = round(prop.table(tab) * 100, 1)
# Getting the median/mean/sd for each manufacturer
ivals = man_dice %>% group_by(pre_ich_cat) %>%
summarise(mean = mean(dice),
sd = sd(dice),
median = median(dice)) %>%
as.data.frame
rownames(ivals) = ivals$pre_ich_cat
ivals$median = round(ivals$median, 2)
# testing medians across manufacturers
kt = kruskal.test(dice ~ pre_ich_cat, data = man_dice)
eg = t(combn(unique(as.character(man_dice$pre_ich_cat)), 2))
eg = data.frame(eg, stringsAsFactors = FALSE)
colnames(eg) = c("Var1", "Var2")
eg$p.value = eg$statistic = NA
# Getting the combination of tests for wilcox
if (kt$p.value < 0.05) {
ieg = 1
for (ieg in seq(nrow(eg))) {
man1 = eg$Var1[ieg]
man2 = eg$Var2[ieg]
wt = wilcox.test(dice ~ pre_ich_cat,
data = man_dice %>% filter(pre_ich_cat %in% c(man1, man2)))
eg$p.value[ieg] = wt$p.value
eg$statistic[ieg] = wt$statistic
}
# adjusting p-values
eg$adj = p.adjust(eg$p.value, method = "bonferroni")
eg
sig = eg[ eg$adj < 0.06, , drop = FALSE]
sig
eg
man_dice %>% arrange(-Pre_Rand_IVHvol) %>% head(2)
large_ivh = man_dice %>% arrange(-Pre_Rand_IVHvol) %>% head(2)
